<!-- * X_LZ_COPYRIGHT_BEGIN ***************************************************
* Copyright 2005-2008 Laszlo Systems, Inc. All Rights Reserved.                    *
* Use is subject to license terms.                                            *
* X_LZ_COPYRIGHT_END ****************************************************** -->
<!-- @LZX_VERSION@                                                         -->
<library>

<include href="roundrect.lzx" />

<!--- 
A class for making nice-looking, styleable buttons with gradients, without any art assets.

See test/test-roundrectbutton.lzx for several examples of how to use this component. 

The component attributes are only used for initialization. They are not live constraints.
Currently the best way to change them at runtime is to apply a &lt;style&gt;. 
-->
<class name="roundrectbutton" extends="basecomponent" styleable="true" >

    <attribute name="downStartColor" type="color" value="0xFFFFFF" />
    <attribute name="downStopColor" type="color" value="0xCCCCCC" />

    <attribute name="upStartColor" type="color" value="0xcccccc" />
    <attribute name="upStopColor" type="color" value="0x999999" />

    <attribute name="overStartColor" type="color" value="0x999999" />
    <attribute name="overStopColor" type="color" value="0x777777" />

    <attribute name="disabledColor" type="color" value="0xEE0000"/>

    <attribute name="borderRadius" value="15"/>
    <attribute name="resourceName" type="string" value=""/>
    <attribute name="textVAlign" type="string" value="middle"/>

    <roundrect name="_rr" width="100%" height="100%">
        <attribute name="borderRadius" value="${parent.borderRadius}"/>
        <attribute name="borderColor" type="color" value="0x999999"/>
        <attribute name="borderWidth" value="1" />
        <attribute name="backgroundStartColor" type="color" value="$once{parent.upStartColor}"/>
        <attribute name="backgroundStopColor" type="color" value="$once{parent.upStopColor}"/>
        <attribute name="boxShadowX" value="0"/>    
        <attribute name="boxShadowY" value="2"/>        
        <attribute name="boxShadowColor" value="0xb3b3b3"/>
    </roundrect>

    <view name="resourceHolder" width="${parent._rr.width}" height="${parent._rr.height}">
      <attribute name="resource" value="$once{parent.resourceName}"/>
      <attribute name="visible" value="$once{parent.resourceName != ''}"/>
    </view>
    <!--ABL added this to replace the problematic _applyStyle below-->
    <method name="redraw">
      // Change the color attributes on the inner roundrect
      this._rr.setAttribute("backgroundStartColor", this.upStartColor);
      this._rr.setAttribute("backgroundStopColor", this.upStopColor);

      // Redraw the inner roundrect
      _rr.drawStructure();
    </method>

    <text name="_label" 
         clickable="false"
         resize="true"
         align="center" valign="${classroot.textVAlign}" textalign="center"
         width="${immediateparent.width}"
         multiline="$once{classroot.multiline}"
         font="$once{classroot.font}"
         fontsize="${classroot.fontsize}"
         text="${classroot.text}"
     />

    <state name="unselectedState" applied="${parent.enabled &amp;&amp; !parent.selectedState.applied}">
      <handler name="onmouseover">
          _rr.setAttribute("backgroundStartColor", this.overStartColor);
          _rr.setAttribute("backgroundStopColor", this.overStopColor);
          _rr.drawStructure();
      </handler>

      <handler name="onmouseup">
          _rr.setAttribute("backgroundStartColor", this.overStartColor);
          _rr.setAttribute("backgroundStopColor", this.overStopColor);
          _rr.drawStructure();
      </handler>


      <handler name="onmouseout">
          _rr.setAttribute("backgroundStartColor", this.upStartColor);
          _rr.setAttribute("backgroundStopColor", this.upStopColor);
          _rr.drawStructure();
      </handler>

      <handler name="onmousedown">
          _rr.setAttribute("backgroundStartColor", this.downStartColor);
          _rr.setAttribute("backgroundStopColor", this.downStopColor);
          _rr.drawStructure();
      </handler>
    </state>
    <state name="selectedState" applied="false">
      <handler name="onapplied">
        if (applied) {
          parent._rr.setAttribute("backgroundStartColor", parent.overStartColor);
          parent._rr.setAttribute("backgroundStopColor", parent.overStopColor);
          parent._rr.drawStructure();
        }
        else {
          parent._rr.setAttribute("backgroundStartColor", parent.upStartColor);
          parent._rr.setAttribute("backgroundStopColor", parent.upStopColor);
          parent._rr.drawStructure();
        }
      </handler>
    </state>
    <state name="disabledState" applied="${!classroot.enabled}">
      <handler name="onapplied"><![CDATA[
        parent.setAttribute('clickable', !applied);
        if (applied) {
          parent._rr.setAttribute("backgroundStartColor", parent.disabledColor);
          parent._rr.setAttribute("backgroundStopColor", parent.disabledColor);
        }
        else {
          parent._rr.setAttribute("backgroundStartColor", parent.upStartColor);
          parent._rr.setAttribute("backgroundStopColor", parent.upStopColor);
          parent._rr.drawStructure();
        }
      ]]></handler>
    </state>

  <!--- @keywords private -->
  <!-- I don't know why this stuff is here, it disables the ability to override the colors
  <method name="_applystyle" args="s">
     // Change the color for the up, down, over states
     this.setAttribute("downStartColor", s.basecolor)
     this.setAttribute("downStopColor", s.bgcolor)

     this.setAttribute("overStartColor", 0xFFFFFF)
     this.setAttribute("overStopColor", s.basecolor)

     this.setAttribute("upStartColor", s.hilitecolor)
     this.setAttribute("upStopColor", s.basecolor)

     // Change the color attributes on the inner roundrect
     this._rr.setAttribute("backgroundStartColor", this.upStartColor);
     this._rr.setAttribute("backgroundStopColor", this.upStopColor);

     this._rr.setAttribute("bordercolor", s.bordercolor)
     this._rr.setAttribute("borderwidth", s.bordersize)

     // Redraw the inner roundrect
     _rr.drawStructure();
  </method>
  -->


  <handler name="onwidth">
        if (!this['_rr']) return;     // ignore these events if the roundrect 
                                      // itself hasn't been built yet
        _rr.setAttribute('width', this.width);
        _rr.drawStructure();
    </handler>
    
    <handler name="onheight">
        if (!this['_rr']) return;     // ignore these events if the roundrect 
                                      // itself hasn't been built yet
        _rr.setAttribute('height', this.height);
        _rr.drawStructure();
    </handler>
    
    
    
</class>

</library>
                                                                                            
